// 탑다운 DP
// 규칙을 순방향 적용해서 탑다운으로 채워나가기
// 10이면 2나누기/1빼기 가능하니 5랑 9에 1넣기
// 9에서는 3나누기, 1빼기 가능하니 3이랑 8에 2 넣기
// 8에서는 2나누기, 1빼기 가능하니 4랑 7에 3넣기
// 7에서는 1빼기 가능하니 6에 4넣기
// 6에서는 3나누기, 2나누기, 1빼기 다 가능하다.
// 2에 5넣기, 3에 5넣기, 5에 5넣기인데
// 3에 이미 더 작은값인 2가 있고, 5에도 1이 있으니 스킵.
// ...하다보면 3차례가 오고 3나누기 가능한데
// 3에는 2가 있으니 1에 3이 채워진다.

// 전역/지역에 따른 배열 크기 제한 차이
// main에서 백만 크기 배열 선언 시 씹힌다. 함수마다 정해진 스택크기가 있는데
// 백만이면 이를 대부분 차지?하는지 선언이 안된다.
// 대신 전역에서 선언 시 stack이 아닌 DATA 영역에 저장되므로 가능하다!


#include <iostream>
using namespace std;

int DP[1000001];

int main(){
    int X;
    cin >> X;
    fill(DP, DP+X, 1000001);
    DP[X] = 0;

    for(int x = X ; x > 1 ; x--){
        if(x%3==0){
            DP[x/3] = min(DP[x/3], DP[x]+1);
        }
        if(x%2==0){
            DP[x/2] = min(DP[x/2], DP[x]+1);
        }
        DP[x-1] = min(DP[x-1], DP[x] + 1);
    }

    cout << DP[1] << endl;
}